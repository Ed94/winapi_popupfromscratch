package zydis

import "core:c"

foreign import zydis "lib/zydis.lib"

// Basic types
ZyanStatus :: c.uint32_t
ZyanFailed :: 0x80000000

ZYAN_STATUS_SUCCESS :: 0

Instruction_Attributes :: distinct bit_set[Instruction_Attribute; c.uint64_t]
Instruction_Attribute :: enum c.uint64_t {
	HAS_MODRM                   = 0,  // (1ULL << 0)
	HAS_SIB                     = 1,  // (1ULL << 1)
	HAS_REX                     = 2,  // (1ULL << 2)
	HAS_XOP                     = 3,  // (1ULL << 3)
	HAS_VEX                     = 4,  // (1ULL << 4)
	HAS_EVEX                    = 5,  // (1ULL << 5)
	HAS_MVEX                    = 6,  // (1ULL << 6)
	IS_RELATIVE                 = 7,  // (1ULL << 7)
	IS_PRIVILEGED               = 8,  // (1ULL << 8)
	CPUFLAG_ACCESS              = 9,  // (1ULL << 9)
	CPU_STATE_CR                = 10, // (1ULL << 10)
	CPU_STATE_CW                = 11, // (1ULL << 11)
	FPU_STATE_CR                = 12, // (1ULL << 12)
	FPU_STATE_CW                = 13, // (1ULL << 13)
	XMM_STATE_CR                = 14, // (1ULL << 14)
	XMM_STATE_CW                = 15, // (1ULL << 15)
	ACCEPTS_LOCK                = 16, // (1ULL << 16)
	ACCEPTS_REP                 = 17, // (1ULL << 17)
	ACCEPTS_REPE                = 18, // (1ULL << 18)
	ACCEPTS_REPZ                = 18, // Same as ACCEPTS_REPE
	ACCEPTS_REPNE               = 19, // (1ULL << 19)
	ACCEPTS_REPNZ               = 19, // Same as ACCEPTS_REPNE
	ACCEPTS_BND                 = 20, // (1ULL << 20)
	ACCEPTS_XACQUIRE            = 21, // (1ULL << 21)
	ACCEPTS_XRELEASE            = 22, // (1ULL << 22)
	ACCEPTS_HLE_WITHOUT_LOCK    = 23, // (1ULL << 23)
	ACCEPTS_BRANCH_HINTS        = 24, // (1ULL << 24)
	ACCEPTS_NOTRACK             = 25, // (1ULL << 25)
	ACCEPTS_SEGMENT             = 26, // (1ULL << 26)
	HAS_LOCK                    = 27, // (1ULL << 27)
	HAS_REP                     = 28, // (1ULL << 28)
	HAS_REPE                    = 29, // (1ULL << 29)
	HAS_REPZ                    = 29, // Same as HAS_REPE
	HAS_REPNE                   = 30, // (1ULL << 30)
	HAS_REPNZ                   = 30, // Same as HAS_REPNE
	HAS_BND                     = 31, // (1ULL << 31)
	HAS_XACQUIRE                = 32, // (1ULL << 32)
	HAS_XRELEASE                = 33, // (1ULL << 33)
	HAS_BRANCH_NOT_TAKEN        = 34, // (1ULL << 34)
	HAS_BRANCH_TAKEN            = 35, // (1ULL << 35)
	HAS_NOTRACK                 = 36, // (1ULL << 36)
	HAS_SEGMENT_CS              = 37, // (1ULL << 37)
	HAS_SEGMENT_SS              = 38, // (1ULL << 38)
	HAS_SEGMENT_DS              = 39, // (1ULL << 39)
	HAS_SEGMENT_ES              = 40, // (1ULL << 40)
	HAS_SEGMENT_FS              = 41, // (1ULL << 41)
	HAS_SEGMENT_GS              = 42, // (1ULL << 42)
	HAS_OPERANDSIZE             = 43, // (1ULL << 43)
	HAS_ADDRESSSIZE             = 44, // (1ULL << 44)
	HAS_EVEX_B                  = 45, // (1ULL << 45)
}
// Composite attribute for HAS_SEGMENT
INSTRUCTION_ATTRIBUTE_HAS_SEGMENT :: Instruction_Attributes {
	.HAS_SEGMENT_CS,
	.HAS_SEGMENT_SS,
	.HAS_SEGMENT_DS,
	.HAS_SEGMENT_ES,
	.HAS_SEGMENT_FS,
	.HAS_SEGMENT_GS,
}

Branch_Type :: enum c.uint32_t {
	NONE,
	SHORT,
	NEAR,
	FAR,
}

Broadcast_Mode :: enum c.uint32_t {
	INVALID,
	_1_TO_2,
	_1_TO_4,
	_1_TO_8,
	_1_TO_16,
	_1_TO_32,
	_1_TO_64,
	_2_TO_4,
	_2_TO_8,
	_2_TO_16,
	_4_TO_8,
	_4_TO_16,
	_8_TO_16,
}

Encodable_Encodings :: distinct bit_set[Encodable_Encoding; c.uint32_t]
Encodable_Encoding :: enum c.uint32_t {
	DEFAULT = 0,
	LEGACY  = 1,
	_3DNOW  = 2,
	XOP     = 3,
	VEX     = 4,
	EVEX    = 5,
	MVEX    = 6,
}

Branch_Width :: enum c.uint32_t {
	None,
	_8,
	_16,
	_32,
	_64,
}

Conversion_Mode :: enum c.uint32_t {
	INVALID,
	FLOAT16,
	SINT8,
	UINT8,
	SINT16,
	UINT16,
}

Rounding_Mode :: enum c.uint32_t {
	INVALID,
	RN,
	RD,
	RU,
	RZ
}

Swizzle_Mode :: enum c.uint32_t {
	INVALID,
	DCBA,
	CDAB,
	BADC,
	DACB,
	AAAA,
	BBBB,
	CCCC,
	DDDD
}

Address_Size_Hint :: enum c.uint32_t {
	None,
	_16,
	_32,
	_64,
}

Operand_Size_Hint :: enum c.uint32_t {
	None,
	_8,
	_16,
	_32,
	_64
}

// Machine modes
Machine_Mode :: enum c.uint32_t {
	LONG_64 = 0,
	LONG_COMPAT_32,
	LONG_COMPAT_16,
	LEGACY_32,
	LEGACY_16,
	REAL_16,
}

// Mnemonics - only the ones you're using
Mnemonic :: enum c.uint32_t {
	INVALID,
	AAA,
	AAD,
	AADD,
	AAM,
	AAND,
	AAS,
	ADC,
	ADCX,
	ADD,
	ADDPD,
	ADDPS,
	ADDSD,
	ADDSS,
	ADDSUBPD,
	ADDSUBPS,
	ADOX,
	AESDEC,
	AESDEC128KL,
	AESDEC256KL,
	AESDECLAST,
	AESDECWIDE128KL,
	AESDECWIDE256KL,
	AESENC,
	AESENC128KL,
	AESENC256KL,
	AESENCLAST,
	AESENCWIDE128KL,
	AESENCWIDE256KL,
	AESIMC,
	AESKEYGENASSIST,
	AND,
	ANDN,
	ANDNPD,
	ANDNPS,
	ANDPD,
	ANDPS,
	AOR,
	ARPL,
	AXOR,
	BEXTR,
	BLCFILL,
	BLCI,
	BLCIC,
	BLCMSK,
	BLCS,
	BLENDPD,
	BLENDPS,
	BLENDVPD,
	BLENDVPS,
	BLSFILL,
	BLSI,
	BLSIC,
	BLSMSK,
	BLSR,
	BNDCL,
	BNDCN,
	BNDCU,
	BNDLDX,
	BNDMK,
	BNDMOV,
	BNDSTX,
	BOUND,
	BSF,
	BSR,
	BSWAP,
	BT,
	BTC,
	BTR,
	BTS,
	BZHI,
	CALL,
	CBW,
	CDQ,
	CDQE,
	CLAC,
	CLC,
	CLD,
	CLDEMOTE,
	CLEVICT0,
	CLEVICT1,
	CLFLUSH,
	CLFLUSHOPT,
	CLGI,
	CLI,
	CLRSSBSY,
	CLTS,
	CLUI,
	CLWB,
	CLZERO,
	CMC,
	CMOVB,
	CMOVBE,
	CMOVL,
	CMOVLE,
	CMOVNB,
	CMOVNBE,
	CMOVNL,
	CMOVNLE,
	CMOVNO,
	CMOVNP,
	CMOVNS,
	CMOVNZ,
	CMOVO,
	CMOVP,
	CMOVS,
	CMOVZ,
	CMP,
	CMPPD,
	CMPPS,
	CMPSB,
	CMPSD,
	CMPSQ,
	CMPSS,
	CMPSW,
	CMPXCHG,
	CMPXCHG16B,
	CMPXCHG8B,
	COMISD,
	COMISS,
	CPUID,
	CQO,
	CRC32,
	CVTDQ2PD,
	CVTDQ2PS,
	CVTPD2DQ,
	CVTPD2PI,
	CVTPD2PS,
	CVTPI2PD,
	CVTPI2PS,
	CVTPS2DQ,
	CVTPS2PD,
	CVTPS2PI,
	CVTSD2SI,
	CVTSD2SS,
	CVTSI2SD,
	CVTSI2SS,
	CVTSS2SD,
	CVTSS2SI,
	CVTTPD2DQ,
	CVTTPD2PI,
	CVTTPS2DQ,
	CVTTPS2PI,
	CVTTSD2SI,
	CVTTSS2SI,
	CWD,
	CWDE,
	DAA,
	DAS,
	DEC,
	DELAY,
	DIV,
	DIVPD,
	DIVPS,
	DIVSD,
	DIVSS,
	DPPD,
	DPPS,
	EMMS,
	ENCLS,
	ENCLU,
	ENCLV,
	ENCODEKEY128,
	ENCODEKEY256,
	ENDBR32,
	ENDBR64,
	ENQCMD,
	ENQCMDS,
	ENTER,
	EXTRACTPS,
	EXTRQ,
	F2XM1,
	FABS,
	FADD,
	FADDP,
	FBLD,
	FBSTP,
	FCHS,
	FCMOVB,
	FCMOVBE,
	FCMOVE,
	FCMOVNB,
	FCMOVNBE,
	FCMOVNE,
	FCMOVNU,
	FCMOVU,
	FCOM,
	FCOMI,
	FCOMIP,
	FCOMP,
	FCOMPP,
	FCOS,
	FDECSTP,
	FDISI8087_NOP,
	FDIV,
	FDIVP,
	FDIVR,
	FDIVRP,
	FEMMS,
	FENI8087_NOP,
	FFREE,
	FFREEP,
	FIADD,
	FICOM,
	FICOMP,
	FIDIV,
	FIDIVR,
	FILD,
	FIMUL,
	FINCSTP,
	FIST,
	FISTP,
	FISTTP,
	FISUB,
	FISUBR,
	FLD,
	FLD1,
	FLDCW,
	FLDENV,
	FLDL2E,
	FLDL2T,
	FLDLG2,
	FLDLN2,
	FLDPI,
	FLDZ,
	FMUL,
	FMULP,
	FNCLEX,
	FNINIT,
	FNOP,
	FNSAVE,
	FNSTCW,
	FNSTENV,
	FNSTSW,
	FPATAN,
	FPREM,
	FPREM1,
	FPTAN,
	FRNDINT,
	FRSTOR,
	FSCALE,
	FSETPM287_NOP,
	FSIN,
	FSINCOS,
	FSQRT,
	FST,
	FSTP,
	FSTPNCE,
	FSUB,
	FSUBP,
	FSUBR,
	FSUBRP,
	FTST,
	FUCOM,
	FUCOMI,
	FUCOMIP,
	FUCOMP,
	FUCOMPP,
	FWAIT,
	FXAM,
	FXCH,
	FXRSTOR,
	FXRSTOR64,
	FXSAVE,
	FXSAVE64,
	FXTRACT,
	FYL2X,
	FYL2XP1,
	GETSEC,
	GF2P8AFFINEINVQB,
	GF2P8AFFINEQB,
	GF2P8MULB,
	HADDPD,
	HADDPS,
	HLT,
	HRESET,
	HSUBPD,
	HSUBPS,
	IDIV,
	IMUL,
	IN,
	INC,
	INCSSPD,
	INCSSPQ,
	INSB,
	INSD,
	INSERTPS,
	INSERTQ,
	INSW,
	INT,
	INT1,
	INT3,
	INTO,
	INVD,
	INVEPT,
	INVLPG,
	INVLPGA,
	INVLPGB,
	INVPCID,
	INVVPID,
	IRET,
	IRETD,
	IRETQ,
	JB,
	JBE,
	JCXZ,
	JECXZ,
	JKNZD,
	JKZD,
	JL,
	JLE,
	JMP,
	JNB,
	JNBE,
	JNL,
	JNLE,
	JNO,
	JNP,
	JNS,
	JNZ,
	JO,
	JP,
	JRCXZ,
	JS,
	JZ,
	KADDB,
	KADDD,
	KADDQ,
	KADDW,
	KAND,
	KANDB,
	KANDD,
	KANDN,
	KANDNB,
	KANDND,
	KANDNQ,
	KANDNR,
	KANDNW,
	KANDQ,
	KANDW,
	KCONCATH,
	KCONCATL,
	KEXTRACT,
	KMERGE2L1H,
	KMERGE2L1L,
	KMOV,
	KMOVB,
	KMOVD,
	KMOVQ,
	KMOVW,
	KNOT,
	KNOTB,
	KNOTD,
	KNOTQ,
	KNOTW,
	KOR,
	KORB,
	KORD,
	KORQ,
	KORTEST,
	KORTESTB,
	KORTESTD,
	KORTESTQ,
	KORTESTW,
	KORW,
	KSHIFTLB,
	KSHIFTLD,
	KSHIFTLQ,
	KSHIFTLW,
	KSHIFTRB,
	KSHIFTRD,
	KSHIFTRQ,
	KSHIFTRW,
	KTESTB,
	KTESTD,
	KTESTQ,
	KTESTW,
	KUNPCKBW,
	KUNPCKDQ,
	KUNPCKWD,
	KXNOR,
	KXNORB,
	KXNORD,
	KXNORQ,
	KXNORW,
	KXOR,
	KXORB,
	KXORD,
	KXORQ,
	KXORW,
	LAHF,
	LAR,
	LDDQU,
	LDMXCSR,
	LDS,
	LDTILECFG,
	LEA,
	LEAVE,
	LES,
	LFENCE,
	LFS,
	LGDT,
	LGS,
	LIDT,
	LLDT,
	LLWPCB,
	LMSW,
	LOADIWKEY,
	LODSB,
	LODSD,
	LODSQ,
	LODSW,
	LOOP,
	LOOPE,
	LOOPNE,
	LSL,
	LSS,
	LTR,
	LWPINS,
	LWPVAL,
	LZCNT,
	MASKMOVDQU,
	MASKMOVQ,
	MAXPD,
	MAXPS,
	MAXSD,
	MAXSS,
	MCOMMIT,
	MFENCE,
	MINPD,
	MINPS,
	MINSD,
	MINSS,
	MONITOR,
	MONITORX,
	MONTMUL,
	MOV,
	MOVAPD,
	MOVAPS,
	MOVBE,
	MOVD,
	MOVDDUP,
	MOVDIR64B,
	MOVDIRI,
	MOVDQ2Q,
	MOVDQA,
	MOVDQU,
	MOVHLPS,
	MOVHPD,
	MOVHPS,
	MOVLHPS,
	MOVLPD,
	MOVLPS,
	MOVMSKPD,
	MOVMSKPS,
	MOVNTDQ,
	MOVNTDQA,
	MOVNTI,
	MOVNTPD,
	MOVNTPS,
	MOVNTQ,
	MOVNTSD,
	MOVNTSS,
	MOVQ,
	MOVQ2DQ,
	MOVSB,
	MOVSD,
	MOVSHDUP,
	MOVSLDUP,
	MOVSQ,
	MOVSS,
	MOVSW,
	MOVSX,
	MOVSXD,
	MOVUPD,
	MOVUPS,
	MOVZX,
	MPSADBW,
	MUL,
	MULPD,
	MULPS,
	MULSD,
	MULSS,
	MULX,
	MWAIT,
	MWAITX,
	NEG,
	NOP,
	NOT,
	OR,
	ORPD,
	ORPS,
	OUT,
	OUTSB,
	OUTSD,
	OUTSW,
	PABSB,
	PABSD,
	PABSW,
	PACKSSDW,
	PACKSSWB,
	PACKUSDW,
	PACKUSWB,
	PADDB,
	PADDD,
	PADDQ,
	PADDSB,
	PADDSW,
	PADDUSB,
	PADDUSW,
	PADDW,
	PALIGNR,
	PAND,
	PANDN,
	PAUSE,
	PAVGB,
	PAVGUSB,
	PAVGW,
	PBLENDVB,
	PBLENDW,
	PBNDKB,
	PCLMULQDQ,
	PCMPEQB,
	PCMPEQD,
	PCMPEQQ,
	PCMPEQW,
	PCMPESTRI,
	PCMPESTRM,
	PCMPGTB,
	PCMPGTD,
	PCMPGTQ,
	PCMPGTW,
	PCMPISTRI,
	PCMPISTRM,
	PCOMMIT,
	PCONFIG,
	PDEP,
	PEXT,
	PEXTRB,
	PEXTRD,
	PEXTRQ,
	PEXTRW,
	PF2ID,
	PF2IW,
	PFACC,
	PFADD,
	PFCMPEQ,
	PFCMPGE,
	PFCMPGT,
	PFCPIT1,
	PFMAX,
	PFMIN,
	PFMUL,
	PFNACC,
	PFPNACC,
	PFRCP,
	PFRCPIT2,
	PFRSQIT1,
	PFSQRT,
	PFSUB,
	PFSUBR,
	PHADDD,
	PHADDSW,
	PHADDW,
	PHMINPOSUW,
	PHSUBD,
	PHSUBSW,
	PHSUBW,
	PI2FD,
	PI2FW,
	PINSRB,
	PINSRD,
	PINSRQ,
	PINSRW,
	PMADDUBSW,
	PMADDWD,
	PMAXSB,
	PMAXSD,
	PMAXSW,
	PMAXUB,
	PMAXUD,
	PMAXUW,
	PMINSB,
	PMINSD,
	PMINSW,
	PMINUB,
	PMINUD,
	PMINUW,
	PMOVMSKB,
	PMOVSXBD,
	PMOVSXBQ,
	PMOVSXBW,
	PMOVSXDQ,
	PMOVSXWD,
	PMOVSXWQ,
	PMOVZXBD,
	PMOVZXBQ,
	PMOVZXBW,
	PMOVZXDQ,
	PMOVZXWD,
	PMOVZXWQ,
	PMULDQ,
	PMULHRSW,
	PMULHRW,
	PMULHUW,
	PMULHW,
	PMULLD,
	PMULLW,
	PMULUDQ,
	POP,
	POPA,
	POPAD,
	POPCNT,
	POPF,
	POPFD,
	POPFQ,
	POR,
	PREFETCH,
	PREFETCHIT0,
	PREFETCHIT1,
	PREFETCHNTA,
	PREFETCHT0,
	PREFETCHT1,
	PREFETCHT2,
	PREFETCHW,
	PREFETCHWT1,
	PSADBW,
	PSHUFB,
	PSHUFD,
	PSHUFHW,
	PSHUFLW,
	PSHUFW,
	PSIGNB,
	PSIGND,
	PSIGNW,
	PSLLD,
	PSLLDQ,
	PSLLQ,
	PSLLW,
	PSMASH,
	PSRAD,
	PSRAW,
	PSRLD,
	PSRLDQ,
	PSRLQ,
	PSRLW,
	PSUBB,
	PSUBD,
	PSUBQ,
	PSUBSB,
	PSUBSW,
	PSUBUSB,
	PSUBUSW,
	PSUBW,
	PSWAPD,
	PTEST,
	PTWRITE,
	PUNPCKHBW,
	PUNPCKHDQ,
	PUNPCKHQDQ,
	PUNPCKHWD,
	PUNPCKLBW,
	PUNPCKLDQ,
	PUNPCKLQDQ,
	PUNPCKLWD,
	PUSH,
	PUSHA,
	PUSHAD,
	PUSHF,
	PUSHFD,
	PUSHFQ,
	PVALIDATE,
	PXOR,
	RCL,
	RCPPS,
	RCPSS,
	RCR,
	RDFSBASE,
	RDGSBASE,
	RDMSR,
	RDMSRLIST,
	RDPID,
	RDPKRU,
	RDPMC,
	RDPRU,
	RDRAND,
	RDSEED,
	RDSSPD,
	RDSSPQ,
	RDTSC,
	RDTSCP,
	RET,
	RMPADJUST,
	RMPUPDATE,
	ROL,
	ROR,
	RORX,
	ROUNDPD,
	ROUNDPS,
	ROUNDSD,
	ROUNDSS,
	RSM,
	RSQRTPS,
	RSQRTSS,
	RSTORSSP,
	SAHF,
	SALC,
	SAR,
	SARX,
	SAVEPREVSSP,
	SBB,
	SCASB,
	SCASD,
	SCASQ,
	SCASW,
	SEAMCALL,
	SEAMOPS,
	SEAMRET,
	SENDUIPI,
	SERIALIZE,
	SETB,
	SETBE,
	SETL,
	SETLE,
	SETNB,
	SETNBE,
	SETNL,
	SETNLE,
	SETNO,
	SETNP,
	SETNS,
	SETNZ,
	SETO,
	SETP,
	SETS,
	SETSSBSY,
	SETZ,
	SFENCE,
	SGDT,
	SHA1MSG1,
	SHA1MSG2,
	SHA1NEXTE,
	SHA1RNDS4,
	SHA256MSG1,
	SHA256MSG2,
	SHA256RNDS2,
	SHL,
	SHLD,
	SHLX,
	SHR,
	SHRD,
	SHRX,
	SHUFPD,
	SHUFPS,
	SIDT,
	SKINIT,
	SLDT,
	SLWPCB,
	SMSW,
	SPFLT,
	SQRTPD,
	SQRTPS,
	SQRTSD,
	SQRTSS,
	STAC,
	STC,
	STD,
	STGI,
	STI,
	STMXCSR,
	STOSB,
	STOSD,
	STOSQ,
	STOSW,
	STR,
	STTILECFG,
	STUI,
	SUB,
	SUBPD,
	SUBPS,
	SUBSD,
	SUBSS,
	SWAPGS,
	SYSCALL,
	SYSENTER,
	SYSEXIT,
	SYSRET,
	T1MSKC,
	TDCALL,
	TDPBF16PS,
	TDPBSSD,
	TDPBSUD,
	TDPBUSD,
	TDPBUUD,
	TDPFP16PS,
	TEST,
	TESTUI,
	TILELOADD,
	TILELOADDT1,
	TILERELEASE,
	TILESTORED,
	TILEZERO,
	TLBSYNC,
	TPAUSE,
	TZCNT,
	TZCNTI,
	TZMSK,
	UCOMISD,
	UCOMISS,
	UD0,
	UD1,
	UD2,
	UIRET,
	UMONITOR,
	UMWAIT,
	UNPCKHPD,
	UNPCKHPS,
	UNPCKLPD,
	UNPCKLPS,
	V4FMADDPS,
	V4FMADDSS,
	V4FNMADDPS,
	V4FNMADDSS,
	VADDNPD,
	VADDNPS,
	VADDPD,
	VADDPH,
	VADDPS,
	VADDSD,
	VADDSETSPS,
	VADDSH,
	VADDSS,
	VADDSUBPD,
	VADDSUBPS,
	VAESDEC,
	VAESDECLAST,
	VAESENC,
	VAESENCLAST,
	VAESIMC,
	VAESKEYGENASSIST,
	VALIGND,
	VALIGNQ,
	VANDNPD,
	VANDNPS,
	VANDPD,
	VANDPS,
	VBCSTNEBF162PS,
	VBCSTNESH2PS,
	VBLENDMPD,
	VBLENDMPS,
	VBLENDPD,
	VBLENDPS,
	VBLENDVPD,
	VBLENDVPS,
	VBROADCASTF128,
	VBROADCASTF32X2,
	VBROADCASTF32X4,
	VBROADCASTF32X8,
	VBROADCASTF64X2,
	VBROADCASTF64X4,
	VBROADCASTI128,
	VBROADCASTI32X2,
	VBROADCASTI32X4,
	VBROADCASTI32X8,
	VBROADCASTI64X2,
	VBROADCASTI64X4,
	VBROADCASTSD,
	VBROADCASTSS,
	VCMPPD,
	VCMPPH,
	VCMPPS,
	VCMPSD,
	VCMPSH,
	VCMPSS,
	VCOMISD,
	VCOMISH,
	VCOMISS,
	VCOMPRESSPD,
	VCOMPRESSPS,
	VCVTDQ2PD,
	VCVTDQ2PH,
	VCVTDQ2PS,
	VCVTFXPNTDQ2PS,
	VCVTFXPNTPD2DQ,
	VCVTFXPNTPD2UDQ,
	VCVTFXPNTPS2DQ,
	VCVTFXPNTPS2UDQ,
	VCVTFXPNTUDQ2PS,
	VCVTNE2PS2BF16,
	VCVTNEEBF162PS,
	VCVTNEEPH2PS,
	VCVTNEOBF162PS,
	VCVTNEOPH2PS,
	VCVTNEPS2BF16,
	VCVTPD2DQ,
	VCVTPD2PH,
	VCVTPD2PS,
	VCVTPD2QQ,
	VCVTPD2UDQ,
	VCVTPD2UQQ,
	VCVTPH2DQ,
	VCVTPH2PD,
	VCVTPH2PS,
	VCVTPH2PSX,
	VCVTPH2QQ,
	VCVTPH2UDQ,
	VCVTPH2UQQ,
	VCVTPH2UW,
	VCVTPH2W,
	VCVTPS2DQ,
	VCVTPS2PD,
	VCVTPS2PH,
	VCVTPS2PHX,
	VCVTPS2QQ,
	VCVTPS2UDQ,
	VCVTPS2UQQ,
	VCVTQQ2PD,
	VCVTQQ2PH,
	VCVTQQ2PS,
	VCVTSD2SH,
	VCVTSD2SI,
	VCVTSD2SS,
	VCVTSD2USI,
	VCVTSH2SD,
	VCVTSH2SI,
	VCVTSH2SS,
	VCVTSH2USI,
	VCVTSI2SD,
	VCVTSI2SH,
	VCVTSI2SS,
	VCVTSS2SD,
	VCVTSS2SH,
	VCVTSS2SI,
	VCVTSS2USI,
	VCVTTPD2DQ,
	VCVTTPD2QQ,
	VCVTTPD2UDQ,
	VCVTTPD2UQQ,
	VCVTTPH2DQ,
	VCVTTPH2QQ,
	VCVTTPH2UDQ,
	VCVTTPH2UQQ,
	VCVTTPH2UW,
	VCVTTPH2W,
	VCVTTPS2DQ,
	VCVTTPS2QQ,
	VCVTTPS2UDQ,
	VCVTTPS2UQQ,
	VCVTTSD2SI,
	VCVTTSD2USI,
	VCVTTSH2SI,
	VCVTTSH2USI,
	VCVTTSS2SI,
	VCVTTSS2USI,
	VCVTUDQ2PD,
	VCVTUDQ2PH,
	VCVTUDQ2PS,
	VCVTUQQ2PD,
	VCVTUQQ2PH,
	VCVTUQQ2PS,
	VCVTUSI2SD,
	VCVTUSI2SH,
	VCVTUSI2SS,
	VCVTUW2PH,
	VCVTW2PH,
	VDBPSADBW,
	VDIVPD,
	VDIVPH,
	VDIVPS,
	VDIVSD,
	VDIVSH,
	VDIVSS,
	VDPBF16PS,
	VDPPD,
	VDPPS,
	VERR,
	VERW,
	VEXP223PS,
	VEXP2PD,
	VEXP2PS,
	VEXPANDPD,
	VEXPANDPS,
	VEXTRACTF128,
	VEXTRACTF32X4,
	VEXTRACTF32X8,
	VEXTRACTF64X2,
	VEXTRACTF64X4,
	VEXTRACTI128,
	VEXTRACTI32X4,
	VEXTRACTI32X8,
	VEXTRACTI64X2,
	VEXTRACTI64X4,
	VEXTRACTPS,
	VFCMADDCPH,
	VFCMADDCSH,
	VFCMULCPH,
	VFCMULCSH,
	VFIXUPIMMPD,
	VFIXUPIMMPS,
	VFIXUPIMMSD,
	VFIXUPIMMSS,
	VFIXUPNANPD,
	VFIXUPNANPS,
	VFMADD132PD,
	VFMADD132PH,
	VFMADD132PS,
	VFMADD132SD,
	VFMADD132SH,
	VFMADD132SS,
	VFMADD213PD,
	VFMADD213PH,
	VFMADD213PS,
	VFMADD213SD,
	VFMADD213SH,
	VFMADD213SS,
	VFMADD231PD,
	VFMADD231PH,
	VFMADD231PS,
	VFMADD231SD,
	VFMADD231SH,
	VFMADD231SS,
	VFMADD233PS,
	VFMADDCPH,
	VFMADDCSH,
	VFMADDPD,
	VFMADDPS,
	VFMADDSD,
	VFMADDSS,
	VFMADDSUB132PD,
	VFMADDSUB132PH,
	VFMADDSUB132PS,
	VFMADDSUB213PD,
	VFMADDSUB213PH,
	VFMADDSUB213PS,
	VFMADDSUB231PD,
	VFMADDSUB231PH,
	VFMADDSUB231PS,
	VFMADDSUBPD,
	VFMADDSUBPS,
	VFMSUB132PD,
	VFMSUB132PH,
	VFMSUB132PS,
	VFMSUB132SD,
	VFMSUB132SH,
	VFMSUB132SS,
	VFMSUB213PD,
	VFMSUB213PH,
	VFMSUB213PS,
	VFMSUB213SD,
	VFMSUB213SH,
	VFMSUB213SS,
	VFMSUB231PD,
	VFMSUB231PH,
	VFMSUB231PS,
	VFMSUB231SD,
	VFMSUB231SH,
	VFMSUB231SS,
	VFMSUBADD132PD,
	VFMSUBADD132PH,
	VFMSUBADD132PS,
	VFMSUBADD213PD,
	VFMSUBADD213PH,
	VFMSUBADD213PS,
	VFMSUBADD231PD,
	VFMSUBADD231PH,
	VFMSUBADD231PS,
	VFMSUBADDPD,
	VFMSUBADDPS,
	VFMSUBPD,
	VFMSUBPS,
	VFMSUBSD,
	VFMSUBSS,
	VFMULCPH,
	VFMULCSH,
	VFNMADD132PD,
	VFNMADD132PH,
	VFNMADD132PS,
	VFNMADD132SD,
	VFNMADD132SH,
	VFNMADD132SS,
	VFNMADD213PD,
	VFNMADD213PH,
	VFNMADD213PS,
	VFNMADD213SD,
	VFNMADD213SH,
	VFNMADD213SS,
	VFNMADD231PD,
	VFNMADD231PH,
	VFNMADD231PS,
	VFNMADD231SD,
	VFNMADD231SH,
	VFNMADD231SS,
	VFNMADDPD,
	VFNMADDPS,
	VFNMADDSD,
	VFNMADDSS,
	VFNMSUB132PD,
	VFNMSUB132PH,
	VFNMSUB132PS,
	VFNMSUB132SD,
	VFNMSUB132SH,
	VFNMSUB132SS,
	VFNMSUB213PD,
	VFNMSUB213PH,
	VFNMSUB213PS,
	VFNMSUB213SD,
	VFNMSUB213SH,
	VFNMSUB213SS,
	VFNMSUB231PD,
	VFNMSUB231PH,
	VFNMSUB231PS,
	VFNMSUB231SD,
	VFNMSUB231SH,
	VFNMSUB231SS,
	VFNMSUBPD,
	VFNMSUBPS,
	VFNMSUBSD,
	VFNMSUBSS,
	VFPCLASSPD,
	VFPCLASSPH,
	VFPCLASSPS,
	VFPCLASSSD,
	VFPCLASSSH,
	VFPCLASSSS,
	VFRCZPD,
	VFRCZPS,
	VFRCZSD,
	VFRCZSS,
	VGATHERDPD,
	VGATHERDPS,
	VGATHERPF0DPD,
	VGATHERPF0DPS,
	VGATHERPF0HINTDPD,
	VGATHERPF0HINTDPS,
	VGATHERPF0QPD,
	VGATHERPF0QPS,
	VGATHERPF1DPD,
	VGATHERPF1DPS,
	VGATHERPF1QPD,
	VGATHERPF1QPS,
	VGATHERQPD,
	VGATHERQPS,
	VGETEXPPD,
	VGETEXPPH,
	VGETEXPPS,
	VGETEXPSD,
	VGETEXPSH,
	VGETEXPSS,
	VGETMANTPD,
	VGETMANTPH,
	VGETMANTPS,
	VGETMANTSD,
	VGETMANTSH,
	VGETMANTSS,
	VGF2P8AFFINEINVQB,
	VGF2P8AFFINEQB,
	VGF2P8MULB,
	VGMAXABSPS,
	VGMAXPD,
	VGMAXPS,
	VGMINPD,
	VGMINPS,
	VHADDPD,
	VHADDPS,
	VHSUBPD,
	VHSUBPS,
	VINSERTF128,
	VINSERTF32X4,
	VINSERTF32X8,
	VINSERTF64X2,
	VINSERTF64X4,
	VINSERTI128,
	VINSERTI32X4,
	VINSERTI32X8,
	VINSERTI64X2,
	VINSERTI64X4,
	VINSERTPS,
	VLDDQU,
	VLDMXCSR,
	VLOADUNPACKHD,
	VLOADUNPACKHPD,
	VLOADUNPACKHPS,
	VLOADUNPACKHQ,
	VLOADUNPACKLD,
	VLOADUNPACKLPD,
	VLOADUNPACKLPS,
	VLOADUNPACKLQ,
	VLOG2PS,
	VMASKMOVDQU,
	VMASKMOVPD,
	VMASKMOVPS,
	VMAXPD,
	VMAXPH,
	VMAXPS,
	VMAXSD,
	VMAXSH,
	VMAXSS,
	VMCALL,
	VMCLEAR,
	VMFUNC,
	VMINPD,
	VMINPH,
	VMINPS,
	VMINSD,
	VMINSH,
	VMINSS,
	VMLAUNCH,
	VMLOAD,
	VMMCALL,
	VMOVAPD,
	VMOVAPS,
	VMOVD,
	VMOVDDUP,
	VMOVDQA,
	VMOVDQA32,
	VMOVDQA64,
	VMOVDQU,
	VMOVDQU16,
	VMOVDQU32,
	VMOVDQU64,
	VMOVDQU8,
	VMOVHLPS,
	VMOVHPD,
	VMOVHPS,
	VMOVLHPS,
	VMOVLPD,
	VMOVLPS,
	VMOVMSKPD,
	VMOVMSKPS,
	VMOVNRAPD,
	VMOVNRAPS,
	VMOVNRNGOAPD,
	VMOVNRNGOAPS,
	VMOVNTDQ,
	VMOVNTDQA,
	VMOVNTPD,
	VMOVNTPS,
	VMOVQ,
	VMOVSD,
	VMOVSH,
	VMOVSHDUP,
	VMOVSLDUP,
	VMOVSS,
	VMOVUPD,
	VMOVUPS,
	VMOVW,
	VMPSADBW,
	VMPTRLD,
	VMPTRST,
	VMREAD,
	VMRESUME,
	VMRUN,
	VMSAVE,
	VMULPD,
	VMULPH,
	VMULPS,
	VMULSD,
	VMULSH,
	VMULSS,
	VMWRITE,
	VMXOFF,
	VMXON,
	VORPD,
	VORPS,
	VP2INTERSECTD,
	VP2INTERSECTQ,
	VP4DPWSSD,
	VP4DPWSSDS,
	VPABSB,
	VPABSD,
	VPABSQ,
	VPABSW,
	VPACKSSDW,
	VPACKSSWB,
	VPACKSTOREHD,
	VPACKSTOREHPD,
	VPACKSTOREHPS,
	VPACKSTOREHQ,
	VPACKSTORELD,
	VPACKSTORELPD,
	VPACKSTORELPS,
	VPACKSTORELQ,
	VPACKUSDW,
	VPACKUSWB,
	VPADCD,
	VPADDB,
	VPADDD,
	VPADDQ,
	VPADDSB,
	VPADDSETCD,
	VPADDSETSD,
	VPADDSW,
	VPADDUSB,
	VPADDUSW,
	VPADDW,
	VPALIGNR,
	VPAND,
	VPANDD,
	VPANDN,
	VPANDND,
	VPANDNQ,
	VPANDQ,
	VPAVGB,
	VPAVGW,
	VPBLENDD,
	VPBLENDMB,
	VPBLENDMD,
	VPBLENDMQ,
	VPBLENDMW,
	VPBLENDVB,
	VPBLENDW,
	VPBROADCASTB,
	VPBROADCASTD,
	VPBROADCASTMB2Q,
	VPBROADCASTMW2D,
	VPBROADCASTQ,
	VPBROADCASTW,
	VPCLMULQDQ,
	VPCMOV,
	VPCMPB,
	VPCMPD,
	VPCMPEQB,
	VPCMPEQD,
	VPCMPEQQ,
	VPCMPEQW,
	VPCMPESTRI,
	VPCMPESTRM,
	VPCMPGTB,
	VPCMPGTD,
	VPCMPGTQ,
	VPCMPGTW,
	VPCMPISTRI,
	VPCMPISTRM,
	VPCMPLTD,
	VPCMPQ,
	VPCMPUB,
	VPCMPUD,
	VPCMPUQ,
	VPCMPUW,
	VPCMPW,
	VPCOMB,
	VPCOMD,
	VPCOMPRESSB,
	VPCOMPRESSD,
	VPCOMPRESSQ,
	VPCOMPRESSW,
	VPCOMQ,
	VPCOMUB,
	VPCOMUD,
	VPCOMUQ,
	VPCOMUW,
	VPCOMW,
	VPCONFLICTD,
	VPCONFLICTQ,
	VPDPBSSD,
	VPDPBSSDS,
	VPDPBSUD,
	VPDPBSUDS,
	VPDPBUSD,
	VPDPBUSDS,
	VPDPBUUD,
	VPDPBUUDS,
	VPDPWSSD,
	VPDPWSSDS,
	VPDPWSUD,
	VPDPWSUDS,
	VPDPWUSD,
	VPDPWUSDS,
	VPDPWUUD,
	VPDPWUUDS,
	VPERM2F128,
	VPERM2I128,
	VPERMB,
	VPERMD,
	VPERMF32X4,
	VPERMI2B,
	VPERMI2D,
	VPERMI2PD,
	VPERMI2PS,
	VPERMI2Q,
	VPERMI2W,
	VPERMIL2PD,
	VPERMIL2PS,
	VPERMILPD,
	VPERMILPS,
	VPERMPD,
	VPERMPS,
	VPERMQ,
	VPERMT2B,
	VPERMT2D,
	VPERMT2PD,
	VPERMT2PS,
	VPERMT2Q,
	VPERMT2W,
	VPERMW,
	VPEXPANDB,
	VPEXPANDD,
	VPEXPANDQ,
	VPEXPANDW,
	VPEXTRB,
	VPEXTRD,
	VPEXTRQ,
	VPEXTRW,
	VPGATHERDD,
	VPGATHERDQ,
	VPGATHERQD,
	VPGATHERQQ,
	VPHADDBD,
	VPHADDBQ,
	VPHADDBW,
	VPHADDD,
	VPHADDDQ,
	VPHADDSW,
	VPHADDUBD,
	VPHADDUBQ,
	VPHADDUBW,
	VPHADDUDQ,
	VPHADDUWD,
	VPHADDUWQ,
	VPHADDW,
	VPHADDWD,
	VPHADDWQ,
	VPHMINPOSUW,
	VPHSUBBW,
	VPHSUBD,
	VPHSUBDQ,
	VPHSUBSW,
	VPHSUBW,
	VPHSUBWD,
	VPINSRB,
	VPINSRD,
	VPINSRQ,
	VPINSRW,
	VPLZCNTD,
	VPLZCNTQ,
	VPMACSDD,
	VPMACSDQH,
	VPMACSDQL,
	VPMACSSDD,
	VPMACSSDQH,
	VPMACSSDQL,
	VPMACSSWD,
	VPMACSSWW,
	VPMACSWD,
	VPMACSWW,
	VPMADCSSWD,
	VPMADCSWD,
	VPMADD231D,
	VPMADD233D,
	VPMADD52HUQ,
	VPMADD52LUQ,
	VPMADDUBSW,
	VPMADDWD,
	VPMASKMOVD,
	VPMASKMOVQ,
	VPMAXSB,
	VPMAXSD,
	VPMAXSQ,
	VPMAXSW,
	VPMAXUB,
	VPMAXUD,
	VPMAXUQ,
	VPMAXUW,
	VPMINSB,
	VPMINSD,
	VPMINSQ,
	VPMINSW,
	VPMINUB,
	VPMINUD,
	VPMINUQ,
	VPMINUW,
	VPMOVB2M,
	VPMOVD2M,
	VPMOVDB,
	VPMOVDW,
	VPMOVM2B,
	VPMOVM2D,
	VPMOVM2Q,
	VPMOVM2W,
	VPMOVMSKB,
	VPMOVQ2M,
	VPMOVQB,
	VPMOVQD,
	VPMOVQW,
	VPMOVSDB,
	VPMOVSDW,
	VPMOVSQB,
	VPMOVSQD,
	VPMOVSQW,
	VPMOVSWB,
	VPMOVSXBD,
	VPMOVSXBQ,
	VPMOVSXBW,
	VPMOVSXDQ,
	VPMOVSXWD,
	VPMOVSXWQ,
	VPMOVUSDB,
	VPMOVUSDW,
	VPMOVUSQB,
	VPMOVUSQD,
	VPMOVUSQW,
	VPMOVUSWB,
	VPMOVW2M,
	VPMOVWB,
	VPMOVZXBD,
	VPMOVZXBQ,
	VPMOVZXBW,
	VPMOVZXDQ,
	VPMOVZXWD,
	VPMOVZXWQ,
	VPMULDQ,
	VPMULHD,
	VPMULHRSW,
	VPMULHUD,
	VPMULHUW,
	VPMULHW,
	VPMULLD,
	VPMULLQ,
	VPMULLW,
	VPMULTISHIFTQB,
	VPMULUDQ,
	VPOPCNTB,
	VPOPCNTD,
	VPOPCNTQ,
	VPOPCNTW,
	VPOR,
	VPORD,
	VPORQ,
	VPPERM,
	VPREFETCH0,
	VPREFETCH1,
	VPREFETCH2,
	VPREFETCHE0,
	VPREFETCHE1,
	VPREFETCHE2,
	VPREFETCHENTA,
	VPREFETCHNTA,
	VPROLD,
	VPROLQ,
	VPROLVD,
	VPROLVQ,
	VPRORD,
	VPRORQ,
	VPRORVD,
	VPRORVQ,
	VPROTB,
	VPROTD,
	VPROTQ,
	VPROTW,
	VPSADBW,
	VPSBBD,
	VPSBBRD,
	VPSCATTERDD,
	VPSCATTERDQ,
	VPSCATTERQD,
	VPSCATTERQQ,
	VPSHAB,
	VPSHAD,
	VPSHAQ,
	VPSHAW,
	VPSHLB,
	VPSHLD,
	VPSHLDD,
	VPSHLDQ,
	VPSHLDVD,
	VPSHLDVQ,
	VPSHLDVW,
	VPSHLDW,
	VPSHLQ,
	VPSHLW,
	VPSHRDD,
	VPSHRDQ,
	VPSHRDVD,
	VPSHRDVQ,
	VPSHRDVW,
	VPSHRDW,
	VPSHUFB,
	VPSHUFBITQMB,
	VPSHUFD,
	VPSHUFHW,
	VPSHUFLW,
	VPSIGNB,
	VPSIGND,
	VPSIGNW,
	VPSLLD,
	VPSLLDQ,
	VPSLLQ,
	VPSLLVD,
	VPSLLVQ,
	VPSLLVW,
	VPSLLW,
	VPSRAD,
	VPSRAQ,
	VPSRAVD,
	VPSRAVQ,
	VPSRAVW,
	VPSRAW,
	VPSRLD,
	VPSRLDQ,
	VPSRLQ,
	VPSRLVD,
	VPSRLVQ,
	VPSRLVW,
	VPSRLW,
	VPSUBB,
	VPSUBD,
	VPSUBQ,
	VPSUBRD,
	VPSUBRSETBD,
	VPSUBSB,
	VPSUBSETBD,
	VPSUBSW,
	VPSUBUSB,
	VPSUBUSW,
	VPSUBW,
	VPTERNLOGD,
	VPTERNLOGQ,
	VPTEST,
	VPTESTMB,
	VPTESTMD,
	VPTESTMQ,
	VPTESTMW,
	VPTESTNMB,
	VPTESTNMD,
	VPTESTNMQ,
	VPTESTNMW,
	VPUNPCKHBW,
	VPUNPCKHDQ,
	VPUNPCKHQDQ,
	VPUNPCKHWD,
	VPUNPCKLBW,
	VPUNPCKLDQ,
	VPUNPCKLQDQ,
	VPUNPCKLWD,
	VPXOR,
	VPXORD,
	VPXORQ,
	VRANGEPD,
	VRANGEPS,
	VRANGESD,
	VRANGESS,
	VRCP14PD,
	VRCP14PS,
	VRCP14SD,
	VRCP14SS,
	VRCP23PS,
	VRCP28PD,
	VRCP28PS,
	VRCP28SD,
	VRCP28SS,
	VRCPPH,
	VRCPPS,
	VRCPSH,
	VRCPSS,
	VREDUCEPD,
	VREDUCEPH,
	VREDUCEPS,
	VREDUCESD,
	VREDUCESH,
	VREDUCESS,
	VRNDFXPNTPD,
	VRNDFXPNTPS,
	VRNDSCALEPD,
	VRNDSCALEPH,
	VRNDSCALEPS,
	VRNDSCALESD,
	VRNDSCALESH,
	VRNDSCALESS,
	VROUNDPD,
	VROUNDPS,
	VROUNDSD,
	VROUNDSS,
	VRSQRT14PD,
	VRSQRT14PS,
	VRSQRT14SD,
	VRSQRT14SS,
	VRSQRT23PS,
	VRSQRT28PD,
	VRSQRT28PS,
	VRSQRT28SD,
	VRSQRT28SS,
	VRSQRTPH,
	VRSQRTPS,
	VRSQRTSH,
	VRSQRTSS,
	VSCALEFPD,
	VSCALEFPH,
	VSCALEFPS,
	VSCALEFSD,
	VSCALEFSH,
	VSCALEFSS,
	VSCALEPS,
	VSCATTERDPD,
	VSCATTERDPS,
	VSCATTERPF0DPD,
	VSCATTERPF0DPS,
	VSCATTERPF0HINTDPD,
	VSCATTERPF0HINTDPS,
	VSCATTERPF0QPD,
	VSCATTERPF0QPS,
	VSCATTERPF1DPD,
	VSCATTERPF1DPS,
	VSCATTERPF1QPD,
	VSCATTERPF1QPS,
	VSCATTERQPD,
	VSCATTERQPS,
	VSHA512MSG1,
	VSHA512MSG2,
	VSHA512RNDS2,
	VSHUFF32X4,
	VSHUFF64X2,
	VSHUFI32X4,
	VSHUFI64X2,
	VSHUFPD,
	VSHUFPS,
	VSM3MSG1,
	VSM3MSG2,
	VSM3RNDS2,
	VSM4KEY4,
	VSM4RNDS4,
	VSQRTPD,
	VSQRTPH,
	VSQRTPS,
	VSQRTSD,
	VSQRTSH,
	VSQRTSS,
	VSTMXCSR,
	VSUBPD,
	VSUBPH,
	VSUBPS,
	VSUBRPD,
	VSUBRPS,
	VSUBSD,
	VSUBSH,
	VSUBSS,
	VTESTPD,
	VTESTPS,
	VUCOMISD,
	VUCOMISH,
	VUCOMISS,
	VUNPCKHPD,
	VUNPCKHPS,
	VUNPCKLPD,
	VUNPCKLPS,
	VXORPD,
	VXORPS,
	VZEROALL,
	VZEROUPPER,
	WBINVD,
	WRFSBASE,
	WRGSBASE,
	WRMSR,
	WRMSRLIST,
	WRMSRNS,
	WRPKRU,
	WRSSD,
	WRSSQ,
	WRUSSD,
	WRUSSQ,
	XABORT,
	XADD,
	XBEGIN,
	XCHG,
	XCRYPT_CBC,
	XCRYPT_CFB,
	XCRYPT_CTR,
	XCRYPT_ECB,
	XCRYPT_OFB,
	XEND,
	XGETBV,
	XLAT,
	XOR,
	XORPD,
	XORPS,
	XRESLDTRK,
	XRSTOR,
	XRSTOR64,
	XRSTORS,
	XRSTORS64,
	XSAVE,
	XSAVE64,
	XSAVEC,
	XSAVEC64,
	XSAVEOPT,
	XSAVEOPT64,
	XSAVES,
	XSAVES64,
	XSETBV,
	XSHA1,
	XSHA256,
	XSTORE,
	XSUSLDTRK,
	XTEST,
}

// Registers - only the ones you're using
Register :: enum c.uint32_t {
	None,

	// General purpose registers  8-bit
	AL,
	CL,
	DL,
	BL,
	AH,
	CH,
	DH,
	BH,
	SPL,
	BPL,
	SIL,
	DIL,
	R8B,
	R9B,
	R10B,
	R11B,
	R12B,
	R13B,
	R14B,
	R15B,

	// General purpose registers 16-bit
	AX,
	CX,
	DX,
	BX,
	SP,
	BP,
	SI,
	DI,
	R8W,
	R9W,
	R10W,
	R11W,
	R12W,
	R13W,
	R14W,
	R15W,

	// General purpose registers 32-bit
	EAX,
	ECX,
	EDX,
	EBX,
	ESP,
	EBP,
	ESI,
	EDI,
	R8D,
	R9D,
	R10D,
	R11D,
	R12D,
	R13D,
	R14D,
	R15D,

	// General purpose registers 64-bit
	RAX,
	RCX,
	RDX,
	RBX,
	RSP,
	RBP,
	RSI,
	RDI,
	R8,
	R9,
	R10,
	R11,
	R12,
	R13,
	R14,
	R15,

	// Floating point legacy registers
	ST0,
	ST1,
	ST2,
	ST3,
	ST4,
	ST5,
	ST6,
	ST7,
	X87CONTROL,
	X87STATUS,
	X87TAG,

	// Floating point multimedia registers
	MM0,
	MM1,
	MM2,
	MM3,
	MM4,
	MM5,
	MM6,
	MM7,

	// Floating point vector registers 128-bit
	XMM0,
	XMM1,
	XMM2,
	XMM3,
	XMM4,
	XMM5,
	XMM6,
	XMM7,
	XMM8,
	XMM9,
	XMM10,
	XMM11,
	XMM12,
	XMM13,
	XMM14,
	XMM15,
	XMM16,
	XMM17,
	XMM18,
	XMM19,
	XMM20,
	XMM21,
	XMM22,
	XMM23,
	XMM24,
	XMM25,
	XMM26,
	XMM27,
	XMM28,
	XMM29,
	XMM30,
	XMM31,

	// Floating point vector registers 256-bit
	YMM0,
	YMM1,
	YMM2,
	YMM3,
	YMM4,
	YMM5,
	YMM6,
	YMM7,
	YMM8,
	YMM9,
	YMM10,
	YMM11,
	YMM12,
	YMM13,
	YMM14,
	YMM15,
	YMM16,
	YMM17,
	YMM18,
	YMM19,
	YMM20,
	YMM21,
	YMM22,
	YMM23,
	YMM24,
	YMM25,
	YMM26,
	YMM27,
	YMM28,
	YMM29,
	YMM30,
	YMM31,

	// Floating point vector registers 512-bit
	ZMM0,
	ZMM1,
	ZMM2,
	ZMM3,
	ZMM4,
	ZMM5,
	ZMM6,
	ZMM7,
	ZMM8,
	ZMM9,
	ZMM10,
	ZMM11,
	ZMM12,
	ZMM13,
	ZMM14,
	ZMM15,
	ZMM16,
	ZMM17,
	ZMM18,
	ZMM19,
	ZMM20,
	ZMM21,
	ZMM22,
	ZMM23,
	ZMM24,
	ZMM25,
	ZMM26,
	ZMM27,
	ZMM28,
	ZMM29,
	ZMM30,
	ZMM31,

	// Matrix registers
	TMM0,
	TMM1,
	TMM2,
	TMM3,
	TMM4,
	TMM5,
	TMM6,
	TMM7,

	// Flags registers
	FLAGS,
	EFLAGS,
	RFLAGS,

	// Instruction-pointer registers
	IP,
	EIP,
	RIP,

	// Segment registers
	ES,
	CS,
	SS,
	DS,
	FS,
	GS,

	// Table registers
	GDTR,
	LDTR,
	IDTR,
	TR,

	// Test registers
	TR0,
	TR1,
	TR2,
	TR3,
	TR4,
	TR5,
	TR6,
	TR7,

	// Control registers
	CR0,
	CR1,
	CR2,
	CR3,
	CR4,
	CR5,
	CR6,
	CR7,
	CR8,
	CR9,
	CR10,
	CR11,
	CR12,
	CR13,
	CR14,
	CR15,

	// Debug registers
	DR0,
	DR1,
	DR2,
	DR3,
	DR4,
	DR5,
	DR6,
	DR7,
	DR8,
	DR9,
	DR10,
	DR11,
	DR12,
	DR13,
	DR14,
	DR15,

	// Mask registers
	K0,
	K1,
	K2,
	K3,
	K4,
	K5,
	K6,
	K7,

	// Bound registers
	BND0,
	BND1,
	BND2,
	BND3,
	BNDCFG,
	BNDSTATUS,

	// Uncategorized
	MXCSR,
	PKRU,
	XCR0,
	UIF,
}

// Operand types
Operand_Type :: enum c.uint32_t {
	UNUSED = 0,
	REGISTER,
	MEMORY,
	POINTER,
	IMMEDIATE,
}

// Encoder structures
Encoder_Operand :: struct {
	type: Operand_Type,
	reg: struct {
		value: Register,
		is4  : b8,
	},
	mem: struct {
		base        : Register,
		index       : Register,
		scale       : c.uint8_t,
		displacement: c.int64_t,
		size        : c.uint16_t,
	},
	ptr: struct {
		segment: c.uint16_t,
		offset : c.uint32_t,
	},
	imm: struct #raw_union {
		u: c.uint64_t,
		s: c.int64_t,
	},
}

Encoder_Request :: struct {
	machine_mode     : Machine_Mode,
	allowed_encodings: Encodable_Encodings,
	mnemonic         : Mnemonic,
	prefixes         : Instruction_Attributes,
	branch_type      : Branch_Type,
	branch_width     : Branch_Width,
	address_size_hint: Address_Size_Hint,
	operand_size_hint: Operand_Size_Hint,
	operand_count    : c.uint8_t,
	operands         : [5]Encoder_Operand,
	evex: struct {
		broadcast   : Broadcast_Mode,
		rounding    : Rounding_Mode,
		sae         : b8,
		zeroing_mask: b8,
	},
	mvex: struct {
		broadcast    : Broadcast_Mode,
		conversion   : Conversion_Mode,
		rounding     : Rounding_Mode,
		swizzle      : Swizzle_Mode,
		sae          : b8,
		eviction_hint: b8,
	},
}

@(default_calling_convention="c", link_prefix="Zydis")
foreign zydis {
	EncoderEncodeInstruction :: proc(request: ^Encoder_Request, buffer: rawptr, length: ^c.size_t) -> ZyanStatus ---
	EncoderNopFill           :: proc(buffer: rawptr, length: c.size_t) -> ZyanStatus ---
}
